<!doctype html>
<html lang="en">
<head>
    <%- include('htmlHead') %>
</head>
<body>
<%- include('navComponent') %>
<h1>Welcome, <%= username %></h1>

<div class="container">
    <div id="explanationText">Welcome to our exciting chat forum, where the possibilities are endless! Step into our virtual map, a realm
        brimming with elemental rooms, where you can harness the power of conversation and camaraderie. Explore the
        vibrant
        landscapes of the Four Nations, from the serene Air Temple to the bustling streets of Ba Sing Se. Each room
        holds
        its own elemental essence, inviting you to delve into the depths of bending techniques and engage in lively
        discussions about the intricacies of this beloved universe. Unleash your imagination and let your words flow
        like
        bending arts, as you connect with like-minded fans who share your passion for Aang's heroic journey. From
        debating
        the philosophies of the different bending styles to analyzing the deep character arcs, our chat forum offers a
        sanctuary for all those who have been touched by the magic of Avatar: The Last Airbender. So, join us and become
        part of this incredible community where the spirits of friendship and knowledge intertwine, and the legacy of
        Avatar
        lives on through the power of conversation.
    </div>
    <div class="canvas-container">
        <div id="mapContainer">
            <canvas id="mapCanvas" width="800" height="500"></canvas>
        </div>
    </div>
    <div class="chat-container">
        <div id="messages-container">
            <div id="messages"></div>
        </div>
        <input id="text" type="text">
        <input id="currentRoom" type="hidden">
        <button onclick="sendMyMessage()">Send</button>
    </div>
</div>

<script>
    const canvas = document.getElementById('mapCanvas');
    const ctx = canvas.getContext('2d');
    const roomSpots = [
        {name: 'Fire Nation', loc_x: 200, loc_y: 240},
        {name: 'Northern Watertribe', loc_x: 400, loc_y: 90},
        {name: 'Eastern Air Temple', loc_x: 600, loc_y: 290},
        {name: 'Southern Air Temple', loc_x: 350, loc_y: 340},
        {name: 'Western Air Temple', loc_x: 230, loc_y: 180},
        {name: 'Southern Watertribe', loc_x: 385, loc_y: 400},
        {name: 'Ba Sing Se', loc_x: 520, loc_y: 170},
        {name: 'Si Wong Desert', loc_x: 480, loc_y: 250},
        {name: 'Cabbage', loc_x: 360, loc_y: 160}
    ]

    const map = new Image(570, 321);
    map.src = '/pictures/map.jpg';

    canvas.addEventListener('mousemove', handleMousemove);
    canvas.addEventListener('click', handleClick);

    function drawMap() {
        ctx.drawImage(map, 0, 0, canvas.width, canvas.height);

        roomSpots.forEach(room => {
            const {loc_x, loc_y, name} = room;

            ctx.beginPath();
            ctx.shadowBlur = 10;
            ctx.shadowColor = '#ffffff';
            ctx.arc(loc_x, loc_y, 10, 0, 2 * Math.PI);
            ctx.lineWidth = 2;
            ctx.strokeStyle = '#2d2d2d';

            switch (name) {
                case 'Fire Nation':
                    ctx.fillStyle = '#900000'; // Dark red
                    break;
                case 'Eastern Air Temple':
                case 'Southern Air Temple':
                case 'Western Air Temple':
                    ctx.fillStyle = '#ffffff'; // Gray
                    break;
                case 'Northern Watertribe':
                case 'Southern Watertribe':
                    ctx.fillStyle = '#191995'; // Dark blue
                    break;
                case 'Ba Sing Se':
                case 'Si Wong Desert':
                    ctx.fillStyle = '#99512a'; // Brown
                    break;
                case 'Cabbage':
                    ctx.fillStyle = '#1a6800'; // Green
                    break;
                default:
                    ctx.fillStyle = '#6e6e6e'; // Default gray
                    break;
            }


            ctx.fill();
            ctx.stroke();
        })
        ;
    }

    function handleClick(event) {
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;

        roomSpots.forEach(room => {
            if (x > room.loc_x - 10 && x < room.loc_x + 10 && y > room.loc_y - 10 && y < room.loc_y + 10) {
                join(room.name);
            }
        });
    }

    function handleMousemove(event) {
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawMap();

        roomSpots.forEach(room => {
            if (x > room.loc_x - 10 && x < room.loc_x + 10 && y > room.loc_y - 10 && y < room.loc_y + 10) {
                ctx.beginPath();
                ctx.strokeStyle = '#ffffff';
                ctx.arc(room.loc_x, room.loc_y, 15, 0, 2 * Math.PI);
                ctx.fillStyle = '#282828';
                ctx.font = '20px Arial';
                ctx.strokeText(room.name, room.loc_x + 15, room.loc_y);
                ctx.fillText(room.name, room.loc_x + 15, room.loc_y);
                ctx.lineWidth = 2;
                ctx.stroke();
            }
        });
    }

    map.onload = function () {
        drawMap();
    };

    const ws = new WebSocket('ws://localhost:8080');
    const username = '<%= username %>';
    let currentRoom = '';

    ws.onopen = function () {
        console.log('websocket connection established');
        ws.send(JSON.stringify({
            message: 'hello from client',
            room: '',
            username: 'client'
        }));
    };

    ws.onmessage = function (ev) {
        console.log(ev);
        addTextMessage(JSON.parse(ev.data));
    };

    function sendMyMessage() {
        let text = document.getElementById('text').value;
        let room = currentRoom;

        if (room) {
            let message = {
                message: text,
                room: room,
                username: username,
            };
            ws.send(JSON.stringify(message));
        } else {
            // Show an alert or display a message indicating to join a room first
            alert('Please join a room before sending a message.');
        }
    }

    function addTextMessage(message) {
        let tag = document.createElement('p');
        tag.innerHTML = `<strong>${message.username}: </strong>${message.message}`;
        document.getElementById('messages').appendChild(tag);

        const messagesContainer = document.getElementById('messages-container');
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function join(room) {
        currentRoom = room;
        document.getElementById('currentRoom').value = room;
        document.getElementById('messages').innerHTML = '';

        ws.send(JSON.stringify({
            joinRoom: room
        }));

        let message = {
            message: `<i>entered the ${room} chat</i>`,
            room: room,
            username: username,
        };
        ws.send(JSON.stringify(message));
    }
</script>

</body>
</html>
